{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/lion/Documents/web-dev/smartbrain/src/App.js\";\nimport './App.css';\nimport Navigation from './components/Navigation/Navigation';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport Signin from './components/Signin/Signin';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Particles from 'react-particles-js';\nimport { Component } from 'react';\nimport Clarifai from 'clarifai'; //You must add your own API key here from Clarifai.\n\nconst app = new Clarifai.App({\n  apiKey: '299374f86cfb4acfb0dacc5702d17623'\n});\nconst particlesOptions = {\n  particles: {\n    number: {\n      value: 70,\n      density: {\n        enable: true,\n        value_area: 800\n      }\n    }\n  }\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.calculateFaceLocation = data => {\n      // const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n      const clarifaiFace2 = data.outputs[0].data.regions.map(face => face.region_info.bounding_box);\n      const image = document.getElementById('inputimage'); //id from FaceRecognition.js\n\n      const width = Number(image.width);\n      const height = Number(image.height); // for multiple faces\n\n      const FaceCoords = clarifaiFace2.map(facePosition => {\n        return {\n          leftCol: facePosition.left_col * width,\n          topRow: facePosition.top_row * height,\n          rightCol: width - facePosition.right_col * width,\n          bottomRow: height - facePosition.bottom_row * height\n        };\n      }); // console.log(FaceCoords);\n\n      return FaceCoords; // return {\n      //   leftCol: clarifaiFace.left_col * width,\n      //   topRow: clarifaiFace.top_row * height,\n      //   rightCol: width - (clarifaiFace.right_col * width),\n      //   bottomRow: height - (clarifaiFace.bottom_row * height)\n      // }\n    };\n\n    this.displayFaceBox = box => {\n      console.log(box);\n      this.setState({\n        box: box\n      });\n    };\n\n    this.onInputChange = event => {\n      this.setState({\n        input: event.target.value\n      });\n    };\n\n    this.onButtonSubmit = () => {\n      this.setState({\n        imageUrl: this.state.input\n      });\n      app.models.predict(Clarifai.FACE_DETECT_MODEL, this.state.input // this.state.imagURL will not work because react batch multiple calls to setSetate() into a single call to re-render the component a single time. Therefore, the imageUrl has not been updated when we called the Clarifai function. A way to go around this is using a callback function: setState(updater, callback)\n      ).then(response => this.displayFaceBox(this.calculateFaceLocation(response))).catch(err => console.log(err));\n    };\n\n    this.state = {\n      input: '',\n      imageUrl: '',\n      box: []\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Particles, {\n        className: \"particles\",\n        params: particlesOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Rank, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n        onInputChange: this.onInputChange,\n        onButtonSubmit: this.onButtonSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FaceRecognition, {\n        box: this.state.box,\n        imageUrl: this.state.imageUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/lion/Documents/web-dev/smartbrain/src/App.js"],"names":["Navigation","Logo","ImageLinkForm","Rank","Signin","FaceRecognition","Particles","Component","Clarifai","app","App","apiKey","particlesOptions","particles","number","value","density","enable","value_area","constructor","calculateFaceLocation","data","clarifaiFace2","outputs","regions","map","face","region_info","bounding_box","image","document","getElementById","width","Number","height","FaceCoords","facePosition","leftCol","left_col","topRow","top_row","rightCol","right_col","bottomRow","bottom_row","displayFaceBox","box","console","log","setState","onInputChange","event","input","target","onButtonSubmit","imageUrl","state","models","predict","FACE_DETECT_MODEL","then","response","catch","err","render"],"mappings":"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","sourcesContent":["import './App.css';\nimport Navigation from './components/Navigation/Navigation';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport Signin from './components/Signin/Signin';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Particles from 'react-particles-js';\nimport { Component } from 'react';\nimport Clarifai from 'clarifai';\n\n//You must add your own API key here from Clarifai.\nconst app = new Clarifai.App({\n  apiKey: '299374f86cfb4acfb0dacc5702d17623'\n });\n\nconst particlesOptions ={\n  particles: {\n    number: {\n      value: 70,\n      density: {\n        enable: true,\n        value_area: 800\n      }\n    }\n  }\n}\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      input: '',\n      imageUrl: '',\n      box: [], \n    };\n  }\n\n  calculateFaceLocation = (data) => {\n    // const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n    const clarifaiFace2 = data.outputs[0].data.regions.map(face => face.region_info.bounding_box);\n\n    const image = document.getElementById('inputimage'); //id from FaceRecognition.js\n    const width = Number(image.width);\n    const height= Number(image.height);\n\n    // for multiple faces\n    const FaceCoords = clarifaiFace2.map(facePosition => { \n      return {\n        leftCol: facePosition.left_col * width,\n        topRow: facePosition.top_row * height,\n        rightCol: width - (facePosition.right_col * width),\n        bottomRow: height - (facePosition.bottom_row * height)\n      }\n    });\n    // console.log(FaceCoords);\n    return FaceCoords;\n\n    // return {\n    //   leftCol: clarifaiFace.left_col * width,\n    //   topRow: clarifaiFace.top_row * height,\n    //   rightCol: width - (clarifaiFace.right_col * width),\n    //   bottomRow: height - (clarifaiFace.bottom_row * height)\n    // }\n  }\n\n  displayFaceBox = (box) => {\n      console.log(box);\n      this.setState({box: box});\n  }\n\n  onInputChange = (event) => {\n    this.setState({input: event.target.value});\n  }\n\n  onButtonSubmit = () => {\n    this.setState({imageUrl: this.state.input})\n    app.models\n    .predict(\n      Clarifai.FACE_DETECT_MODEL,\n      this.state.input // this.state.imagURL will not work because react batch multiple calls to setSetate() into a single call to re-render the component a single time. Therefore, the imageUrl has not been updated when we called the Clarifai function. A way to go around this is using a callback function: setState(updater, callback)\n    )\n    .then(response => this.displayFaceBox(this.calculateFaceLocation(response)))\n    .catch(err => console.log(err));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Particles className='particles'\n          params = {particlesOptions}\n        />\n        <Navigation />\n        <Logo />\n        <Rank />\n        <ImageLinkForm \n          onInputChange={this.onInputChange} \n          onButtonSubmit={this.onButtonSubmit}/>\n        <FaceRecognition box={this.state.box} imageUrl={this.state.imageUrl}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}