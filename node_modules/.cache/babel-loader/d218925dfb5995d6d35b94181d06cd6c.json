{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/lion/Documents/web-dev/smartbrain/src/App.js\";\nimport './App.css';\nimport Navigation from './components/Navigation/Navigation';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Particles from 'react-particles-js';\nimport { Component } from 'react';\nimport Clarifai from 'clarifai'; //You must add your own API key here from Clarifai.\n\nconst app = new Clarifai.App({\n  apiKey: '299374f86cfb4acfb0dacc5702d17623'\n});\nconst particlesOptions = {\n  particles: {\n    number: {\n      value: 70,\n      density: {\n        enable: true,\n        value_area: 800\n      }\n    }\n  }\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.calculateFaceLocation = data => {\n      // const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n      const clarifaiFace2 = data.outputs[0].data.regions.map(face => {\n        face.region_info.bounding_box;\n        return {\n          leftCol: face.left_col * width,\n          topRow: face.top_row * height,\n          rightCol: width - face.right_col * width,\n          bottomRow: height - face.bottom_row * height\n        };\n      });\n      console.log(clarifaiFace2);\n      const image = document.getElementById('inputimage'); //id from FaceRecognition.js\n\n      const width = Number(image.width);\n      const height = Number(image.height);\n    };\n\n    this.displayFaceBox = box => {\n      console.log(box);\n      this.setState({\n        box: box\n      });\n    };\n\n    this.onInputChange = event => {\n      this.setState({\n        input: event.target.value\n      });\n    };\n\n    this.onButtonSubmit = () => {\n      this.setState({\n        imageUrl: this.state.input\n      });\n      app.models.predict(Clarifai.FACE_DETECT_MODEL, this.state.input // this.state.imagURL will not work because react batch multiple calls to setSetate() into a single call to re-render the component a single time. Therefore, the imageUrl has not been updated when we called the Clarifai function. A way to go around this is using a callback function: setState(updater, callback)\n      ).then(response => this.displayFaceBox(this.calculateFaceLocation(response))).catch(err => console.log(err));\n    };\n\n    this.state = {\n      input: '',\n      imageUrl: '',\n      box: {}\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Particles, {\n        className: \"particles\",\n        params: particlesOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Rank, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n        onInputChange: this.onInputChange,\n        onButtonSubmit: this.onButtonSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FaceRecognition, {\n        box: this.state.box,\n        imageUrl: this.state.imageUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/lion/Documents/web-dev/smartbrain/src/App.js"],"names":["Navigation","Logo","ImageLinkForm","Rank","FaceRecognition","Particles","Component","Clarifai","app","App","apiKey","particlesOptions","particles","number","value","density","enable","value_area","constructor","calculateFaceLocation","data","clarifaiFace2","outputs","regions","map","face","region_info","bounding_box","leftCol","left_col","width","topRow","top_row","height","rightCol","right_col","bottomRow","bottom_row","console","log","image","document","getElementById","Number","displayFaceBox","box","setState","onInputChange","event","input","target","onButtonSubmit","imageUrl","state","models","predict","FACE_DETECT_MODEL","then","response","catch","err","render"],"mappings":"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","sourcesContent":["import './App.css';\nimport Navigation from './components/Navigation/Navigation';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Particles from 'react-particles-js';\nimport { Component } from 'react';\nimport Clarifai from 'clarifai';\n\n//You must add your own API key here from Clarifai.\nconst app = new Clarifai.App({\n  apiKey: '299374f86cfb4acfb0dacc5702d17623'\n });\n\nconst particlesOptions ={\n  particles: {\n    number: {\n      value: 70,\n      density: {\n        enable: true,\n        value_area: 800\n      }\n    }\n  }\n}\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      input: '',\n      imageUrl: '',\n      box: {},\n    };\n  }\n\n  calculateFaceLocation = (data) => {\n    // const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n    const clarifaiFace2 = data.outputs[0].data.regions.map(face => {\n      face.region_info.bounding_box;\n      \n      return {\n        leftCol: face.left_col * width,\n        topRow: face.top_row * height,\n        rightCol: width - (face.right_col * width),\n        bottomRow: height - (face.bottom_row * height)\n      }\n    });\n    console.log (clarifaiFace2);\n\n    const image = document.getElementById('inputimage'); //id from FaceRecognition.js\n    const width = Number(image.width);\n    const height= Number(image.height);\n  }\n\n  displayFaceBox = (box) => {\n    console.log(box);\n    this.setState({box: box});\n  }\n\n  onInputChange = (event) => {\n    this.setState({input: event.target.value});\n  }\n\n  onButtonSubmit = () => {\n    this.setState({imageUrl: this.state.input})\n    app.models\n    .predict(\n      Clarifai.FACE_DETECT_MODEL,\n      this.state.input // this.state.imagURL will not work because react batch multiple calls to setSetate() into a single call to re-render the component a single time. Therefore, the imageUrl has not been updated when we called the Clarifai function. A way to go around this is using a callback function: setState(updater, callback)\n    )\n    .then(response => this.displayFaceBox(this.calculateFaceLocation(response)))\n    .catch(err => console.log(err));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Particles className='particles'\n          params = {particlesOptions}\n        />\n        <Navigation />\n        <Logo />\n        <Rank />\n        <ImageLinkForm \n          onInputChange={this.onInputChange} \n          onButtonSubmit={this.onButtonSubmit}/>\n        <FaceRecognition box={this.state.box} imageUrl={this.state.imageUrl}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}